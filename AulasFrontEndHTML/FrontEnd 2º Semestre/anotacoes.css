SELETORES, CLASSES E IDENTIFICADORES

seletores são as próprias tags, ex:
    h1{
        teste
    }

classes são referenciadas por "."
    .nome_classe{
        teste
    }

identificadores únicos (id) deveme ser únicos sem reptições e devem ser referenciados por "#"
    #nome_id{
        teste
    }

não opodemos iniciar nomes com números, nem conter espaços ou coarateres especiais

uma forma de agrupar seletores é fazer:
    h1, p{
        teste
    }

---------------------------------------------------------------------------------------------------------------

COLOR

color picker <- página do google para adquirir valor exadecimal de um cor

cores podem ser inseridas pelo nome em inglê, pelo valor hexadecimal ou no padrão RGB

---------------------------------------------------------------------------------------------------------------

BACKGROUND

"background-color" <- segue a mesma regra da propriedade "color"
podemos inserir como fundo uma imagem através da propriedade "background-imagem:url()"
com "background-size" podemos definir o tamanho que a imagem ficara no elemnto, para isso temos as variações: 
    contain <- mantem o tamanho ajustado mas repete a imagem se não couber em todo elemento;
    cover <- ajusta ao elemento cortando os cantos caso necessário

"background-repeat" <- usado para definir se a imagem repete ou não caso não consiga pegar toda área do elemento. Podemos usar os padrões:
    repeat <- repete a imagem
    no-repeat <- impede a repetição
    repeat-x <- repete somente pros lados
    repeat-y <- repete somete pra cima ou pra baixo;

com "background-position" podemos deinifir qual ponto da imagem queremos dar foco com os padrões:
    top, center, bottom, left, right <- cada uma conforme o lado desejado

é possível utilizar um tipo de "short range", que seria inserir tudo em uma só proprieda para resumir, ex:
    background: gray url no-repeat center;
não é ideal usar desta forma.

---------------------------------------------------------------------------------------------------------------

BORDER

com "border:" podemos deinifir tamanho, estilo entre ouras coisas da borda:
    ex: border: 1px solid black;
    padrão: tamanho estilo cor
        tamanho: conforme o desejado

        estilo:solid <-solida
                dotted <- pontilhada
                dashed <- traçada 
                double <- cria uma borda dupla
                groove <- efeito 3D
                ridge <- parece que vem de fora do elemento
                inset <- de dentro pra fora
                outset <- de fora pra dentro
                none <- nenhuma
                hidden <- oculta
        
        cor: segue o padrão da propriedade color

com "border-'direção':" podemos personalizar cada lado da borda

com "border-radius:" podemos arredondar a borda conforme desejado

---------------------------------------------------------------------------------------------------------------

MARGIN

com "margin:" podemos definir as margens da página;
com "margin-direção:" podemos definir exatamente onde, qual lado quermeos que tenha uma margem
se utilizar apenas "margin" como short range ela aceita os quatro lados na seguinte ordem:
    margin: "topo" "direta" "abaixo" "esquerda";

---------------------------------------------------------------------------------------------------------------

PADDING

faz os mesmo que o margin, porém ele faz dentro do elemento, enquanto o "margin" é referente à página, o "padding" é referente ao elemento.
de resto ele funciona ighual ao "margin":
    padding: "topo" "direta" "abaixo" "esquerda";
    padding-"direção":

padding é bastante usado para se criar botões personalizados

---------------------------------------------------------------------------------------------------------------

BONUS - efeito de quando passar o mouse sobre um elemento

    .nome_classe:hover{
        teste(color,backgorund-color,etc...)
    }

"hover" significa "sobre"

shift + alt com a linha selecionada, copia a linha e rescreve a medida que vai descendo.

---------------------------------------------------------------------------------------------------------------

WIDTH & HEIGHT

simples, cada um define a largura e altura do elemento.
    width: 999x
    height: 999x
importante notar que o elemento fica preso dentro destes valores estipulados, se ajustando conforme necessário
"max-width" define o tamanho máximo que a tela pode ter de largura

---------------------------------------------------------------------------------------------------------------

TEXT

com "text-align" podemos organizar como fica alinhado o texto. 
    padrões:    center <- centralizado
                left <- à esquerda
                right <- à direita
                justify <- justificado

com "direction:rtl" podemos inverter a direção original do texto.

com "unicode-bidi:bidi-override" podemos inverter as palavras de traz pra foreignObject.

com "text-decoration:" podemos mudar o aspecto visual do texto (muito utilizado com links).
    padrões:    none <- nenhum
                overline <- linha acima do texto
                line-through <- linha no meio do texto, pra dar efeito de riscado
                inderline  <- linha abixo do texto

com "text-transform:" podemos mudar o comportamento do texto.
    padrões:    uppercase <- deixa tudo em maísculo
                lowercase <- deixa tudo em minúsculo
                capitalize <- Deixa a primeira letra de todas as palavras em maiúsculo

com "text-indent: tamanho" podemos aplicar um efeito de parágrafo.

com "letter-spacing: tamanho" permite terminar o espaçamento entre letras.

com "line-height: tamanho" (tamanho definido utilizando casa decimais) podemos definir o espaçamento entre linhas do texto.

com "word-spacing: tamanho" podemos definir o espaçmento entre as palavras.

---------------------------------------------------------------------------------------------------------------

FONTES

com "font-family:" podemos definir o padrão da fonte (já vem com diversas disponíveis).
com "font-size:" podemos definir o tamanho da fonte.

para usar fontes externas, podemos utilizar o Google Fonts que possuí fontes livres de direitos autorais.
Após selecionar uma fonte, devemos copiar o link ou o import da fonte e inserir no nosso index.html, em seguida adicionar a linha de css onde deseja aplicar a fonte.

com "font-style:" podemos definir estilos diferentes para a fonte (ex: normal, italic, oblique).
com "font-weight:" é possível definir a grossura da fonte (ex: bold p/ negrito ou um valor númerico conforme a grossura desejada)

---------------------------------------------------------------------------------------------------------------

LINKS

uma forma de referenciar uma classe à um link, usamos:
    a.nome_classe{
        teste
    }
em outras palavras, essa propriedade css só vai funcionar se for um link que possuir a classe "nome_classe"

podemos usar as popriedades já cionhecidas como? background, color, padding, text-decoration, border, etc.
além disso podemos utilizar o ":hover".

um forma de manipular o comportamento de um link para criar um botão é:
    a.nome_classe{
        teste
    }

    a.nome_classe:hover{
        teste
    }

Assim o cascateamento do CSS vai manipular todas as propriedades em conjunto.

Uma propriedade que pode ser usada, é o "cursor:". com ela, podemos definir qual aparencia ou comportamento o cursor terá ao ser posicionado sobre um link.

---------------------------------------------------------------------------------------------------------------

DISPLAY

podemos definir o comportamento do campo de um elemento

display:block -> ele ocupa toda a extensão do elemento/página, todo o "bloco" e os novos elementos são posicinados abaixo
display:inline -> ela ocupa apenas o espaço necessário referente ao elemento e os novos elementos são posicinados ao lado
display:none -> faz com que o elemento não apareça desde o primeiro momento, apesar de ser carregado na página... Útil para fazer um elemento dinâmico

no display inline o comportamento funciona como se limitasse à palavras e assim criaria um espaçamento em branco entre cada palavra (isso indepente do "margin:"")

com o "display: inline-block;" ele segue as regras do display em inline, mas aceita as configuração do display block

podemos utilizar a propriedade "visibility: hidden;" para ocultar um elemento sem perder a área que ele ocupa na página, ao contrário do "display: none;".

---------------------------------------------------------------------------------------------------------------

DICA SOBRE USO DO MAX-WIDTH

ele faz com que o elemento possua no máximo a largura definida, mas caso esteja sendo utilizada uma tela menor como de um celular por exemplo, a largura do elemento acaba se ajustando ao tamanho tela

---------------------------------------------------------------------------------------------------------------

POSITION

existem 5 tipos de position:
    static -> posicionamento padrão.

    relative -> posicinamento relativo à posição original do elemento (desbloqueia as opções top, left, right & bottom esse parâmetros funcionam como coordenas p/ o elemento e a opção z-index). Podemos usar a propriedade "z-index: ;" para definir a ordem de posicionamentos da pagina, o que fica acima de que, através de números.

    fixed -> faz com que o elemento se mantenha fixo em um ponto relativo à tela (definimos a posição exata através das propriedades top, bottom, etc...), além disso o elemetno fica acima de todos os outros da tela.

    absolute -> este desrespeito qual sera a posição do elemento de acordo com o elemento pai ao qual ele esta contido. No entanto, caso o elemento pai não possua uma position definida, o elemento filho terá como referência o elemento com posicionamento acima do pai. (tbm utiliza top, right, ...).

    sticky -> trava o elemento no ponto desejado e assim que utilizada uma barra de rolagem o mesmo andará junto da tela (é relativo ao pai).

---------------------------------------------------------------------------------------------------------------

OVERFLOW

em algumas ocasiões eu posso desejar definir o tamanho total do meu elemento, porém ao fazer isso, pode ser que o conteúdo dentro dele "vaze" devido a prorpiedade de overflow.

"overflow: visible;" o conteúdo segue sendo mostrado mesmo que ultrapasse o "tamanho" do elemento.
"overflow: hidden;" faz com que apenas o conteúdo contido dentro do tamanho do elemento permaneça visível.
"overflow> scroll" adiciona a barra de rolagem par ao elemento.
"overflow: auto" é automático, ou seja, seleciona o tipo de overflow mais ideal de acordo com o conteúdo e o tamanho do elemento.

a propriedade overflow: só funciona caso seja definido a altura do nosso elemento!

usando "overflow-y: hidden;" ou "overflow-x: hidden;" podemos ocultar a barra de rolagem do elemento (eixo y = altura, eixo x = largura).

---------------------------------------------------------------------------------------------------------------

FLOAT

Utilizando quando precisamos ter um certo alinhamento em nossa página. Em outra palavras o elemento desejado sai do fluxo original da página/elemento pai e pode ser inserido em outros pontos. 

usando "clear:both" o elemento contendo essa propriedade, voltará para o fluxo normal da página. Do contrário ele seguira até o limite do elemento que está em float.

os itens em float acabam modificando a posição dos demais itens presentes, movendoos pro lado, pra cima e pra baixo, conforme o posicionamento do elemento em float.

---------------------------------------------------------------------------------------------------------------

OPACITY

usando "opacity: 0.x;"" podemos definir quão visível algo é em nossa página. Podemos utilizar juntamente o "nome_classe:hover" para criar um efeito sobre o item para que fique menos opaco ao mexer com o mouse sobre.
O controle da opacidade vai de 0.0 até 1 (porcentagem em decimais). 

Caso haja um texto dentro do elemento, o ideal é que ele seja inserido por fora e ajustado individualmente ou então o mesmo será transparecido.

---------------------------------------------------------------------------------------------------------------

DROPDOWN

Efeito de abrir listinha com itens ao selecionar um elemento... Ver aula-css-dropdown para maior clareza.

---------------------------------------------------------------------------------------------------------------

ESPECIFICIDADE

Se houver 2 regras afetando um mesmo elemento, é necessário saber o que o navegador executara primeiro.

Ex: Style dentro da tag > style dentro do html > style dentro do css externo.

Classes tem prioridade em relação ao sleetor simples (tag).

Identificadores únicos (id) são mais fortes que classes, ou seja, tem prioridade.

Style(direto na tag) > ID > Classe > Seletor(tag). Porém seletor + classe ou ID é mais específico e por isso ganha mais força.

Caso seja usada um mesmo seletor com propriedades iguais, o que vai valer vai ser sempre o último.

id > tag.classe > .classe > tag.

---------------------------------------------------------------------------------------------------------------

IMPORTANT

Inserindo o comando "!important" em uma propriedade, ele faz com que todas as demais regras da especificade sejam ignoradas e considere apenas o que você marcou com "!important", inclusive ignora a regra masi forte que seria direto na tag, "ela força o comportamento", mas n]ao deve ser utilizado sem sabedoria.

---------------------------------------------------------------------------------------------------------------

GRADIENTE

Efeito de transição de "uma cor pra outra" ou "de um elemento à outro".

Devemos utilizar a propriedade "background-image: ;" com o parâmetro "linear-gradient()". Entre os parênteses podemos definir, a direção do gradiente.
    Ex: background-image: linear-gradiente(45deg, red, green, blue);
    "linear" trata de linha, para um circulo podemos usar "radial" entre outros.
Além disso podemos definir a porcentagem presente da cor, utilizando por exemplo: blue 55%

Em resumo é um efeito de degradê.

---------------------------------------------------------------------------------------------------------------

BOX-SHADOW E TEXT-SHADOW
Efeitos de sombra em textos e elementos.

TEXT

Usa-se "text-shadow: valorVertical valorHorizontal valorBlur valorCor" e você via verificando a melhor formatação.
Podemos fazer sombras mescladas com: text-shadow: valorVertical valorHorizontal valorBlur valorCor, valorVertical valorHorizontal valorBlur valorCor.

BOX

Usa-se "box-shadow: valorVertical valorHorizontal valorBlur valorCor".

Dica de box shadow para fazer cards: 
    box-shadow:: 0 4px 8px 0 rgba(0,0,0,0.2), 0 6px 20px 0 rgba(0,0,0,0.19).

Efeitos de sombra é interessante pesquisar estilos que outras pessoas já criaram e aplicar ao seu código.

---------------------------------------------------------------------------------------------------------------

EFEITOS DE TEXTO 

propriedade "white-space:nowrap" faz o texto ficar todo lado a lado, sem quebra de linhas.
propriedade "text-overflow" define como o texto vai se comportar ao atingir o limite do overflow.

---------------------------------------------------------------------------------------------------------------

MEDIA QUERIES

"Layout responsivo" ou responsividade. Permite ver a aplicação de diferentes formas de acordo com a resolução. Afinal temos diferentes dispositivos para se visualizar uma página.

/* Smartphones (600px para baixo) */
@media only screen and (max-width: 600px) {
    o que vai acontecer se o tamanho máximo for o definido em "max-width:"
}

/* Dispositivos um pouco maiores, mas ainda pequenos (Pequenos Tablets e Smartphones + largos, 600px para cima) */
@media only screen and (min-width: 600px) {...}

/*Dispostivos Médios (Tablets deitados, 768px para cima) */
@media only screen and (min-width: 768px) {...}

/* Dispostivos Largos (laptops/desktops, 992px para cima) */
@media only screen and (min-width: 992px) {...}

/* Super Largos (Telas maiores laptops, desktops e até TVs, 1200px para cima) */
@media only screen and (min-width: 1200px) {...}

estas são as 5 media queries usadas comumente por padrão. Lembrando que ao invés de "screen" podemos passar inúmeros outros parâmetros de tela, como impressoras entre outros, mas o mais comum e usado é screen.

O seletor deve ser utilizado dentro da media, só assim o css funcionára.

É possível definir o que acontece dentro de um intervalo exato de tamanho usando:
    @media only screen and (min-width: 1080px) and (max-width: 1920px) {...}


---------------------------------------------------------------------------------------------------------------

FLEXBOX

Trabalha utilizando o tipo de "display: flex". Ele permite trabalhar de melhor forma os diferentes tipos de dispaly com diversas propriedades próprias.

    
PROPRIEDADES:

    flex-direction:
        - column -> comportamento de bloco, tomando a área até o fim da página.
        - row -> comportamento de linha, deixando elementos um ao lado do outro.
        - row-reverse -> comportamento de linha, mas iniciando do lado direito da página e invertendo a ordem dos elementos.
        - column-reverse -> comportamento de bloco, mas invertendo a ordem dos elementos.

    flex-wrap:
        - nowrap -> padrão, os elementos não estarão contidos a ele, vazando do elemento pai.
        - wrap -> ao atingir o tamanho do elemento pai, ele joga os elementos pra próxima linha.
    
    flex-flow:
    Trata-se de um short range que unifica o direction e wrap, funciona na ordem-> flex-flow: row wrap

    justify-content: (ajusta o elemento em relação à horizontal)
        - flex-start -> padrão, os itens ficam alinhados à esquerda do elemento pai.
        - flex-end -> os itens ficam alinhados à direita do elemento pai.
        - center -> os itens ficam alinhados ao centro do elemento pai.
        - space-between -> adapta os itens dentro do elemento pai para criar um espaçamento entre um e outro de forma uniforme. (responsivo)
        - space-around -> cria um espaçamento uniforme na volta de cada um dos elementos. (responsivo)

    align-items: (ajusta o elemento em relação à vertical)
        - stretch -> faz com que o elemento filho ocupe todo espaço/altura do elemento pai.
        - center -> faz com que os itens fiquem justificados ao centro do elemento pai.
        - flex-start -> os itens ficam alinhados ao inicio do elemento pai.
        - flex-end -> os itens ficam alinhados ao final do elemento pai.
        - space-between -> adapta os itens dentro do elemento pai para criar um espaçamento entre um e outro de forma uniforme. (responsivo)
        - space-around -> cria um espaçamento uniforme na volta de cada um dos elementos. (responsivo)

    align-content: (necessário para não deixar os itens da próxima linha separados)
        - center -> deixa tudo num mesmo bloco ao centro.
        - flex-start -> os itens ficam todos alinhados ao inicio do elemento pai.
        - flex-end -> os itens ficam todos alinhados ao final do elemento pai.

    A principal diferença entre align-items e align-content é que no content pegamos todos os elementos e agrupamos. Com o items vamos manipular itens de forma individual.

    flex-grow: (sempre deve ficar no elemento filho, trata-se do crescimento dos itens em relação aà tela de forma automatizada).
    O número inserido define o tamanho que o item vai crescer.





    

    

